// <auto-generated />
using CalendarService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CalendarService.Migrations
{
    [DbContext(typeof(CalendarServiceContext))]
    partial class CalendarServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("CalendarService.ReminderInstance", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EventId");

                    b.Property<string>("FeedId");

                    b.Property<string>("ReminderId");

                    b.Property<int>("Revision");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("ReminderId");

                    b.ToTable("ReminderInstances");
                });

            modelBuilder.Entity("CalendarService.StoredConfigState", b =>
                {
                    b.Property<string>("State")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RedirectUri");

                    b.Property<DateTime>("StoredTime");

                    b.Property<string>("UserId");

                    b.HasKey("State");

                    b.HasIndex("UserId");

                    b.ToTable("ConfigStates");
                });

            modelBuilder.Entity("CalendarService.StoredConfiguration", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken");

                    b.Property<DateTime>("ExpiresIn");

                    b.Property<string>("RefreshToken");

                    b.Property<string>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("CalendarService.StoredFeed", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConfigurationId");

                    b.Property<string>("FeedId");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("Feeds");
                });

            modelBuilder.Entity("CalendarService.StoredNotification", b =>
                {
                    b.Property<string>("NotificationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Expires");

                    b.Property<string>("ProviderNotificationId");

                    b.Property<string>("StoredFeedId");

                    b.HasKey("NotificationId");

                    b.HasIndex("StoredFeedId")
                        .IsUnique();

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CalendarService.StoredReminder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientState");

                    b.Property<DateTime>("Expires");

                    b.Property<uint>("Minutes");

                    b.Property<string>("NotificationUri");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("CalendarService.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CalendarService.ReminderInstance", b =>
                {
                    b.HasOne("CalendarService.StoredReminder", "Reminder")
                        .WithMany("Instances")
                        .HasForeignKey("ReminderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CalendarService.StoredConfigState", b =>
                {
                    b.HasOne("CalendarService.User", "User")
                        .WithMany("ConfigStates")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CalendarService.StoredConfiguration", b =>
                {
                    b.HasOne("CalendarService.User", "User")
                        .WithMany("Configurations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CalendarService.StoredFeed", b =>
                {
                    b.HasOne("CalendarService.StoredConfiguration", "Configuration")
                        .WithMany("SubscribedFeeds")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CalendarService.StoredNotification", b =>
                {
                    b.HasOne("CalendarService.StoredFeed", "Feed")
                        .WithOne("Notification")
                        .HasForeignKey("CalendarService.StoredNotification", "StoredFeedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CalendarService.StoredReminder", b =>
                {
                    b.HasOne("CalendarService.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
